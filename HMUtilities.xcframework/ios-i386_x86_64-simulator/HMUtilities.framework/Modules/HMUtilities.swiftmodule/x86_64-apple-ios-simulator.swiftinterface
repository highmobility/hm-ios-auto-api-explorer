// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HMUtilities
import Foundation
import Swift
extension Double : HMUtilities.HMBytesConvertable {
  public var bytes: [Swift.UInt8] {
    get
  }
  public init?(bytes: [Swift.UInt8])
}
extension Date : HMUtilities.HMBytesConvertable {
  public var bytes: [Swift.UInt8] {
    get
  }
  public init?(bytes: [Swift.UInt8])
}
extension Bool : HMUtilities.HMBytesConvertable {
  public var byte: Swift.UInt8 {
    get
  }
  public var bytes: [Swift.UInt8] {
    get
  }
  public init?(bytes: [Swift.UInt8])
}
public protocol HMBytesConvertable {
  var bytes: [Swift.UInt8] { get }
  init?(bytes: [Swift.UInt8])
}
extension HMBytesConvertable {
  public init?(bytes: Swift.Array<Swift.UInt8>?)
  public init?(bytes: Swift.ArraySlice<Swift.UInt8>?)
}
extension HMBytesConvertable where Self : Swift.FixedWidthInteger {
  public var bytes: [Swift.UInt8] {
    get
  }
  public init?(bytes: [Swift.UInt8])
}
extension HMBytesConvertable where Self : Swift.RawRepresentable, Self.RawValue == Swift.UInt8 {
  public var bytes: [Swift.UInt8] {
    get
  }
  public init?(bytes: [Swift.UInt8])
}
extension Int : HMUtilities.HMBytesConvertable {
  public init?(bytes: [Swift.UInt8])
}
extension Int8 : HMUtilities.HMBytesConvertable {
  public var bytes: [Swift.UInt8] {
    get
  }
  public init?(bytes: [Swift.UInt8])
}
extension Int16 : HMUtilities.HMBytesConvertable {
  public init?(bytes: [Swift.UInt8])
}
extension Int32 : HMUtilities.HMBytesConvertable {
  public init?(bytes: [Swift.UInt8])
}
extension Int64 : HMUtilities.HMBytesConvertable {
  public init?(bytes: [Swift.UInt8])
}
extension UInt : HMUtilities.HMBytesConvertable {
}
extension UInt8 : HMUtilities.HMBytesConvertable {
}
extension UInt16 : HMUtilities.HMBytesConvertable {
}
extension UInt32 : HMUtilities.HMBytesConvertable {
}
extension UInt64 : HMUtilities.HMBytesConvertable {
}
extension NSLock {
  public func lockUnlock(_ block: () -> Swift.Void)
}
public enum HMDebugTree {
  case leaf(label: Swift.String)
  case node(label: Swift.String, nodes: [HMUtilities.HMDebugTree])
  public var label: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
  public func visualise()
  public init(_ anything: Any, label: Swift.String? = nil, expandProperties: Swift.Bool = false, customValue: ((Any, Swift.String, Swift.Bool) -> HMUtilities.HMDebugTree?)? = nil)
}
extension URL : HMUtilities.HMBytesConvertable {
  public var bytes: [Swift.UInt8] {
    get
  }
  public init?(bytes: [Swift.UInt8])
}
extension Float : HMUtilities.HMBytesConvertable {
  public var bytes: [Swift.UInt8] {
    get
  }
  public init?(bytes: [Swift.UInt8])
}
extension SignedInteger {
  public var uint8: Swift.UInt8 {
    get
  }
}
extension String {
  public var hexBytes: [Swift.UInt8] {
    get
  }
}
extension String : HMUtilities.HMBytesConvertable {
  public var bytes: [Swift.UInt8] {
    get
  }
  public init?(bytes: [Swift.UInt8])
}
extension Collection where Self.Element == Swift.UInt8 {
  public var bytes: [Swift.UInt8] {
    get
  }
  public var data: Foundation.Data {
    get
  }
  public var hex: Swift.String {
    get
  }
}
extension Collection where Self.Index == Swift.Int {
  public func compactMapConcurrently<ElementOfResult>(_ transform: (Self.Element) -> ElementOfResult?) -> [ElementOfResult]
}
