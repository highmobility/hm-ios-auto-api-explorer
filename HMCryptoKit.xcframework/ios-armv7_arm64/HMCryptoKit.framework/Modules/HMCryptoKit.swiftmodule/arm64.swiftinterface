// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HMCryptoKit
import CommonCrypto
import CryptoKit
import Foundation
import HMUtilities
import Security
import Swift
extension SecKey {
  public var bytes: [Swift.UInt8] {
    get
  }
  public var count: Swift.Int {
    get
  }
  public var data: Foundation.Data {
    get
  }
  public var hex: Swift.String {
    get
  }
}
public let kCipherAndKeySize: Swift.Int
extension HMCryptoKit {
  public static func encryptDecrypt<C>(message: C, iv: C, key: C) throws -> [Swift.UInt8] where C : Swift.Collection, C.Element == Swift.UInt8
  public static func iv<C>(nonce: C, transactionNonce: C) throws -> [Swift.UInt8] where C : Swift.Collection, C.Element == Swift.UInt8
}
extension HMCryptoKit {
  public static func hmac<C>(message: C, key: C) throws -> [Swift.UInt8] where C : Swift.Collection, C.Element == Swift.UInt8
  public static func verify<C>(hmac: C, message: C, key: C) throws -> Swift.Bool where C : Swift.Collection, C.Element == Swift.UInt8
}
extension HMCryptoKit {
  public static func keys() throws -> (privateKey: Security.SecKey, publicKey: Security.SecKey)
  public static func keys(privateKey: Security.SecKey) throws -> (privateKey: Security.SecKey, publicKey: Security.SecKey)
  public static func publicKey<C>(binary: C) throws -> Security.SecKey where C : Swift.Collection, C.Element == Swift.UInt8
  public static func privateKey<C>(privateKeyBinary: C, publicKeyBinary: C) throws -> Security.SecKey where C : Swift.Collection, C.Element == Swift.UInt8
  public static func sharedKey(privateKey: Security.SecKey, publicKey: Security.SecKey) throws -> [Swift.UInt8]
}
public let kNonceSize: Swift.Int
public let kSerialNumberSize: Swift.Int
extension HMCryptoKit {
  public static func nonce(_ length: Swift.Int = kNonceSize) throws -> [Swift.UInt8]
  public static func randomBytes(_ length: Swift.Int) throws -> [Swift.UInt8]
  public static func serial(_ length: Swift.Int = kSerialNumberSize) throws -> [Swift.UInt8]
}
extension HMCryptoKit {
  public static func sha256<C>(message: C) throws -> [Swift.UInt8] where C : Swift.Collection, C.Element == Swift.UInt8
}
extension HMCryptoKit {
  public static func signature<C>(message: C, privateKey: Security.SecKey, padded: Swift.Bool = true) throws -> [Swift.UInt8] where C : Swift.Collection, C.Element == Swift.UInt8
  public static func verify<C>(signature: C, message: C, publicKey: Security.SecKey) throws -> Swift.Bool where C : Swift.Collection, C.Element == Swift.UInt8
}
public struct HMCryptoKit {
}
public enum HMCryptoKitError : Swift.Error {
  case commonCryptoError(CommonCrypto.CCCryptorStatus)
  case osStatusError(Darwin.OSStatus)
  case secKeyError(CoreFoundation.CFError)
  case invalidInputSize(Swift.String)
  case systemError(Swift.Int32)
}
